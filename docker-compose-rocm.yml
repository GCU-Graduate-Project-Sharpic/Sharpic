version: '3.8'

volumes:
  user_data:
  minio_data:

services:
  postgresql:
    image: postgres
    volumes:
      - user_data:/var/lib/postgresql/data
      - ./server/initdb:/docker-entrypoint-initdb.d
    restart: always
    environment:
      POSTGRES_PASSWORD: sharpgcu75!!
      POSTGRES_DB: Sharpic
      TZ: Asia/Seoul
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  server:
    build: 
      context: ./server
      dockerfile: ./Dockerfile
    environment:
      POSTGRES_DB: Sharpic
      POSTGRES_HOST: postgresql
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: sharpgcu75!!
      JWT_TOKEN_LIFESPAN: 6
      JWT_SECRET: sharpgcu75!!
      MINIO_HOST: minio:9000
      MINIO_ACCESS_ID: minio
      MINIO_ACCESS_PW: sharpgcu75!!
    restart: always
    depends_on:
      postgresql:
        condition: service_healthy
      minio:
        condition: service_healthy
  
  imagesr:
    build:
      context: ./imagesr
      dockerfile: ./rocm.Dockerfile
    devices:
      - "/dev/kfd:/dev/kfd"
      - "/dev/dri:/dev/dri"
    security_opt:
      - seccomp:unconfined
    group_add:
      - video
    shm_size: 8G
    depends_on:
      postgresql:
        condition: service_healthy
      minio:
        condition: service_started
      server:
        condition: service_started
    environment:
      HOST: postgresql
      DATABASE: Sharpic
      USER_SQL: postgres
      PASS: sharpgcu75!!
      PORT: 5432
      MINIO_HOST: minio:9000
      MINIO_ACCESS_ID: minio
      MINIO_ACCESS_PW: sharpgcu75!!
    restart: always
  
  minio:
    image: minio/minio:latest
    command: ["server", "/data", "--console-address", ":9001"]
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: sharpgcu75!!
    ports:
      - 9000:9000 
      - 9001:9001
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  web:
    build: 
      context: ./web
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      - postgresql
      - imagesr
      - server
    ports:
      - 8007:80
